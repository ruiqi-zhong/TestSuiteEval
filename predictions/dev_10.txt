SELECT count( * ) FROM singer	concert_singer
SELECT count( * ) FROM singer	concert_singer
SELECT Name,Country,Age FROM singer ORDER BY Age DESC	concert_singer
SELECT Name,Country,Age FROM singer ORDER BY Age DESC	concert_singer
SELECT avg( Age ),min( Age ),max( Age ) FROM singer WHERE Country = 'France'	concert_singer
SELECT avg( Age ),min( Age ),max( Age ) FROM singer WHERE Country = 'French'	concert_singer
SELECT Song_Name,Song_release_year FROM singer ORDER BY Age LIMIT 1	concert_singer
SELECT Song_Name,Song_release_year FROM singer ORDER BY Age LIMIT 1	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT DISTINCT Country FROM singer WHERE Age > 20	concert_singer
SELECT Country,count( * ) FROM singer GROUP BY Country	concert_singer
SELECT Country,count( * ) FROM singer GROUP BY Country	concert_singer
SELECT Song_Name FROM singer WHERE Age > ( SELECT avg( Age ) FROM singer )	concert_singer
SELECT Song_Name FROM singer WHERE Age > ( SELECT avg( Age ) FROM singer )	concert_singer
SELECT Location,Name FROM stadium WHERE Capacity between 5000 AND 10000	concert_singer
SELECT Location,Name FROM stadium WHERE Capacity between 5000 AND 10000	concert_singer
SELECT avg( Average ),max( Capacity ) FROM stadium	concert_singer
SELECT avg( Average ),max( Capacity ) FROM stadium	concert_singer
SELECT Name,Capacity FROM stadium ORDER BY avg( Average ) DESC LIMIT 1	concert_singer
SELECT Name,Capacity FROM stadium ORDER BY avg( Average ) DESC LIMIT 1	concert_singer
SELECT count( * ) FROM concert WHERE Year = '2014' or Year = '2015'	concert_singer
SELECT count( * ) FROM concert WHERE Year = '2014' or Year = '2015'	concert_singer
SELECT T1.Name,count( * ) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID	concert_singer
SELECT T1.Stadium_ID,count( * ) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID	concert_singer
SELECT T1.Name,T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= '2014' GROUP BY T2.Stadium_ID ORDER BY count( * ) DESC LIMIT 1	concert_singer
SELECT T1.Name,T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > '2013' GROUP BY T2.Stadium_ID ORDER BY count( * ) DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY count( * ) DESC LIMIT 1	concert_singer
SELECT Year FROM concert GROUP BY Year ORDER BY count( * ) DESC LIMIT 1	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT in ( SELECT Stadium_ID FROM concert )	concert_singer
SELECT Name FROM stadium WHERE Stadium_ID NOT in ( SELECT Stadium_ID FROM concert )	concert_singer
SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'	concert_singer
SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'	concert_singer
SELECT T1.concert_Name,T1.Theme,count( * ) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T2.concert_ID	concert_singer
SELECT T1.concert_Name,T1.Theme,count( * ) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T2.concert_ID	concert_singer
SELECT T1.Name,count( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID	concert_singer
SELECT T1.Name,count( * ) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID	concert_singer
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'	concert_singer
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'	concert_singer
SELECT Name,Country FROM singer WHERE Song_Name like '%Hey%'	concert_singer
SELECT Name,Country FROM singer WHERE Song_Name like '%Hey%'	concert_singer
SELECT T1.Name,T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name,T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'	concert_singer
SELECT T1.Name,T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name,T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'	concert_singer
SELECT count( * ) FROM stadium ORDER BY Capacity DESC LIMIT 1	concert_singer
SELECT count( * ) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T1.Capacity DESC LIMIT 1	concert_singer
SELECT count( * ) FROM Pets WHERE weight > 10	pets_1
SELECT count( * ) FROM Pets WHERE weight > 10	pets_1
SELECT weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT max( weight ),PetType FROM Pets GROUP BY PetType	pets_1
SELECT PetType,max( weight ),weight FROM Pets GROUP BY PetType	pets_1
SELECT count( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > 20	pets_1
SELECT count( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > 20	pets_1
SELECT count( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'female' and T3.PetType = 'dog'	pets_1
SELECT count( * ) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'female'	pets_1
SELECT count( DISTINCT PetType ) FROM Pets	pets_1
SELECT count( DISTINCT PetType ) FROM Pets	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' or T3.PetType = 'dog'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID in ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'	pets_1
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cats' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dogs'	pets_1
SELECT Major,Age FROM Student WHERE StuID NOT in ( SELECT pet_age FROM Pets )	pets_1
SELECT Major,Age FROM Student WHERE StuID NOT in ( SELECT pet_age FROM Pets )	pets_1
SELECT StuID FROM Student EXCEPT SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID	pets_1
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet	pets_1
SELECT T1.Fname,T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname,T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'	pets_1
SELECT Fname FROM Student WHERE StuID in ( SELECT PetID FROM Pets ) EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID = cat	pets_1
SELECT PetType,weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT PetType,weight FROM Pets ORDER BY pet_age LIMIT 1	pets_1
SELECT PetID,weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetID,weight FROM Pets WHERE pet_age > 1	pets_1
SELECT PetType,max( pet_age ),pet_age FROM Pets GROUP BY PetType	pets_1
SELECT PetType,max( pet_age ),avg( pet_age ) FROM Pets GROUP BY PetType	pets_1
SELECT PetType,avg( weight ) FROM Pets GROUP BY PetType	pets_1
SELECT PetType,avg( weight ) FROM Pets GROUP BY PetType	pets_1
SELECT DISTINCT T1.Fname,T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT DISTINCT T1.Fname,T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID	pets_1
SELECT T2.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = '‘Smith’'	pets_1
SELECT T3.PetID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.LName = 'Smith'	pets_1
SELECT count( * ),StuID FROM Has_Pet GROUP BY StuID	pets_1
SELECT T1.StuID,count( * ) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID GROUP BY T1.StuID	pets_1
SELECT T1.Fname,T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID HAVING count( * ) > 1	pets_1
SELECT T1.Fname,T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T2.StuID HAVING count( * ) > 1	pets_1
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3	pets_1
SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3	pets_1
SELECT avg( Age ) FROM Student WHERE StuID NOT in ( SELECT StuID FROM Has_Pet )	pets_1
SELECT avg( Age ) FROM Student WHERE StuID NOT in ( SELECT StuID FROM Has_Pet )	pets_1
SELECT count( * ) FROM continents	car_1
SELECT count( * ) FROM continents	car_1
SELECT Continent,*,count( * ) FROM countries GROUP BY Continent	car_1
SELECT T1.Continent,T2.CountryName,count( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.Continent	car_1
SELECT count( * ) FROM countries	car_1
SELECT count( * ) FROM countries	car_1
SELECT T1.FullName,T1.Id,count( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id	car_1
SELECT T1.FullName,T1.Id,count( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id	car_1
SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model ORDER BY T2.Model LIMIT 1	car_1
SELECT T2.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model ORDER BY T2.Model LIMIT 1	car_1
SELECT Model FROM model_list WHERE Model in ( SELECT avg( Weight ) FROM cars_data )	car_1
SELECT Model FROM model_list WHERE Model < ( SELECT avg( Weight ) FROM cars_data )	car_1
SELECT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970	car_1
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970	car_1
SELECT T3.Make,T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model ORDER BY T3.Make LIMIT 1	car_1
SELECT Maker,FullName FROM car_makers ORDER BY Maker LIMIT 1	car_1
SELECT DISTINCT Model FROM car_names WHERE Model > '1980'	car_1
SELECT DISTINCT Model FROM model_list WHERE Maker > 1980	car_1
SELECT T1.Continent,count( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent	car_1
SELECT T1.Continent,count( * ) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T2.Continent	car_1
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count( * ) DESC LIMIT 1	car_1
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T2.Country ORDER BY count( * ) DESC LIMIT 1	car_1
SELECT count( * ),T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T2.Maker	car_1
SELECT T1.Id,T1.FullName,T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id	car_1
SELECT Accelerate FROM cars_data WHERE MPG = 'amc hornet'	car_1
SELECT Accelerate FROM cars_data WHERE MPG = 'amc hornet'	car_1
SELECT count( * ) FROM car_makers WHERE Country = 'france'	car_1
SELECT count( * ) FROM car_makers WHERE Country = 'France'	car_1
SELECT count( * ) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryName = 'usa'	car_1
SELECT count( * ) FROM countries WHERE CountryName = 'United States'	car_1
SELECT avg( MPG ) FROM cars_data WHERE Cylinders = 4	car_1
SELECT avg( Horsepower ) FROM cars_data WHERE Cylinders = 4	car_1
SELECT min( Weight ) FROM cars_data WHERE Cylinders = 8 and Year = 1974	car_1
SELECT min( Weight ) FROM cars_data WHERE Cylinders = 8 and Year = in	car_1
SELECT Maker,FullName FROM car_makers	car_1
SELECT Maker,FullName FROM car_makers	car_1
SELECT T1.CountryName,T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country HAVING count( * ) >= 1	car_1
SELECT T1.CountryName,T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1	car_1
SELECT count( * ) FROM cars_data WHERE Horsepower > '150'	car_1
SELECT count( * ) FROM cars_data WHERE Horsepower > '150'	car_1
SELECT avg( Weight ),Year FROM cars_data GROUP BY Year	car_1
SELECT avg( Weight ),Year,Weight FROM cars_data GROUP BY Year	car_1
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = europe GROUP BY T1.CountryId HAVING count( * ) >= 3	car_1
SELECT CountryName FROM countries WHERE Continent = European GROUP BY CountryName HAVING count( * ) >= 3	car_1
SELECT max( T2.Horsepower ),T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3	car_1
SELECT max( Horsepower ),Horsepower FROM cars_data WHERE Cylinders = 3	car_1
SELECT Model FROM model_list ORDER BY count( * ) DESC LIMIT 1	car_1
SELECT Make FROM car_names ORDER BY Make DESC LIMIT 1	car_1
SELECT avg( Horsepower ) FROM cars_data WHERE Year < 1980	car_1
SELECT avg( Horsepower ) FROM cars_data WHERE Year < 1980	car_1
SELECT avg( T2.Edispl ) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = '?'	car_1
SELECT avg( Edispl ) FROM cars_data WHERE MPG = '?'	car_1
SELECT max( Accelerate ),max( Cylinders ) FROM cars_data GROUP BY Cylinders	car_1
SELECT max( Accelerate ),max( Cylinders ) FROM cars_data GROUP BY Cylinders	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count( * ) DESC LIMIT 1	car_1
SELECT Model FROM model_list GROUP BY Model ORDER BY count( * ) DESC LIMIT 1	car_1
SELECT count( * ) FROM cars_data WHERE Cylinders > 4	car_1
SELECT count( * ) FROM cars_data WHERE Cylinders > 4	car_1
SELECT count( * ) FROM cars_data WHERE Year = 1980	car_1
SELECT count( * ) FROM cars_data WHERE Year = 1980	car_1
SELECT count( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor'	car_1
SELECT count( * ) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'American Motor Company'	car_1
SELECT T1.FullName,T1.Id,* FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3	car_1
SELECT T1.Maker,T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3	car_1
SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'General Motors' or T1.Maker = '3500'	car_1
SELECT DISTINCT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'General Motors' or T1.Maker = '3500'	car_1
SELECT Year FROM cars_data WHERE Weight < 3000 INTERSECT SELECT Year FROM cars_data WHERE Weight > 4000	car_1
SELECT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT Year FROM cars_data WHERE Weight > 3000	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1	car_1
SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Model = 'volvo' ORDER BY T3.Accelerate LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Accelerate = volvo ORDER BY Accelerate LIMIT 1	car_1
SELECT count( * ) FROM cars_data WHERE Accelerate > ( SELECT max( Horsepower ) FROM cars_data )	car_1
SELECT count( * ) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1 )	car_1
SELECT Country FROM car_makers GROUP BY Country HAVING count( * ) > 2	car_1
SELECT count( * ) FROM countries GROUP BY  HAVING count( * ) > 2	car_1
SELECT count( * ) FROM cars_data WHERE Cylinders > 6	car_1
SELECT count( * ) FROM cars_data WHERE Cylinders > cylinders	car_1
SELECT Cylinders FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1	car_1
SELECT Cylinders FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1	car_1
SELECT *,Make FROM car_names WHERE MakeId in ( SELECT min( Horsepower ) FROM cars_data HAVING max( Cylinders ) > 3 ) EXCEPT SELECT T1.MakeId,T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders > 3	car_1
SELECT MakeId,Make FROM car_names WHERE MakeId NOT in ( SELECT min( Horsepower ) FROM cars_data )	car_1
SELECT max( MPG ) FROM cars_data WHERE Cylinders = 8 or Year < 1980	car_1
SELECT max( MPG ) FROM cars_data WHERE Cylinders = 8 or Year < before	car_1
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < 3500 EXCEPT SELECT T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'Motor Company ''	car_1
SELECT DISTINCT Model FROM model_list WHERE Maker < but EXCEPT SELECT DISTINCT FullName FROM car_makers WHERE Maker = 'Company ?'	car_1
SELECT CountryName FROM countries WHERE CountryId NOT in ( SELECT Country FROM car_makers ) EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country	car_1
SELECT CountryName FROM countries WHERE CountryId NOT in ( SELECT Country FROM car_makers )	car_1
SELECT Id,Maker FROM car_makers GROUP BY Id HAVING count( * ) >= 2 INTERSECT SELECT Id,Maker FROM car_makers GROUP BY Id HAVING count( * ) > 3	car_1
SELECT T1.Id,T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id,T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id HAVING count( * ) > 3	car_1
SELECT T1.CountryId,T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T1.CountryId HAVING count( * ) > 3 UNION SELECT T1.CountryId,T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat' GROUP BY T1.CountryId HAVING count( * ) > 3	car_1
SELECT T1.CountryId,T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) > 3 UNION SELECT T1.CountryId,T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) > fiats	car_1
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways affiliated with'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'	flight_2
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways ?'	flight_2
SELECT Airline,Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT Airline,Abbreviation FROM airlines WHERE Country = 'USA'	flight_2
SELECT AirportCode,AirportName FROM airports WHERE City = 'Anthony'	flight_2
SELECT AirportCode,AirportName FROM airports WHERE City = '.'	flight_2
SELECT count( * ) FROM airlines	flight_2
SELECT count( * ) FROM airlines	flight_2
SELECT count( * ) FROM airports	flight_2
SELECT count( * ) FROM airports	flight_2
SELECT count( * ) FROM flights	flight_2
SELECT count( * ) FROM flights	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	flight_2
SELECT count( * ) FROM airlines WHERE Country = 'USA'	flight_2
SELECT count( * ) FROM airlines WHERE Country = 'USA'	flight_2
SELECT City,Country FROM airports WHERE AirportName = 'Alton'	flight_2
SELECT City,Country FROM airports WHERE AirportName = 'Alton'	flight_2
SELECT AirportName FROM airports WHERE AirportName = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT AirportName FROM airports WHERE City = 'Aberdeen'	flight_2
SELECT count( * ) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT count( * ) FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT count( * ) FROM flights WHERE DestAirport = 'ATO'	flight_2
SELECT count( * ) FROM flights WHERE SourceAirport = 'ATO'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen' and T2.DestAirport = 'Ashley'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen' and T1.AirportName = 'Ashley'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'JetBlue Airways'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'Jetblue Airways flights .'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T1.Airline = 'United Airlines' and T1.Airline = 'United Airlines'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'ASY'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T1.Airline = 'United Airlines'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'AHD'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T3.City = 'Aberdeen' and T1.Airline = 'United Airlines'	flight_2
SELECT count( * ) FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'Aberdeen' and T1.Airline = 'United Airlines'	flight_2
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT City FROM airports GROUP BY City ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT City FROM airports GROUP BY City ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT AirportCode FROM airports ORDER BY count( * ) LIMIT 1	flight_2
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY count( * ) DESC LIMIT 1	flight_2
SELECT T1.Abbreviation,T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid ORDER BY count( * ) LIMIT 1	flight_2
SELECT T1.Abbreviation,T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Country ORDER BY count( * ) LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'from'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'airports'	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING count( * ) >= 10	flight_2
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING count( * ) >= 10	flight_2
SELECT Airline FROM airlines WHERE uid < ( SELECT Airline FROM flights )	flight_2
SELECT Airline FROM airlines WHERE uid NOT < ( SELECT Airline FROM flights )	flight_2
SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'United Airlines'	flight_2
SELECT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = 'United Airlines'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'APG'	flight_2
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'APG'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'APG'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT T2.FlightNo FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen' or T1.AirportName = 'Abilene'	flight_2
SELECT count( * ) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen' or T1.CountryAbbrev = 'Abilene'	flight_2
SELECT AirportName FROM airports WHERE City NOT in ( SELECT DestAirport FROM flights )	flight_2
SELECT AirportName FROM airports WHERE City NOT in ( SELECT DestAirport FROM flights ) EXCEPT SELECT DestAirport FROM flights	flight_2
SELECT count( * ) FROM employee	employee_hire_evaluation
SELECT count( * ) FROM employee	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age	employee_hire_evaluation
SELECT count( * ),City FROM employee GROUP BY City	employee_hire_evaluation
SELECT count( * ),City FROM employee GROUP BY City	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count( * ) > 1	employee_hire_evaluation
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count( * ) > 1	employee_hire_evaluation
SELECT Location,count( * ) FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Location,count( * ) FROM shop GROUP BY Location	employee_hire_evaluation
SELECT Manager_name,District FROM shop GROUP BY Manager_name ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT Manager_name,District FROM shop ORDER BY Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT min( Number_products ),max( Number_products ) FROM shop	employee_hire_evaluation
SELECT min( Number_products ),max( Number_products ) FROM shop	employee_hire_evaluation
SELECT Name,Location,District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name,Location,District FROM shop ORDER BY Number_products DESC	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > ( SELECT avg( Number_products ) FROM shop )	employee_hire_evaluation
SELECT Name FROM shop WHERE Number_products > ( SELECT avg( Number_products ) FROM shop )	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name ORDER BY count( * ) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID NOT in ( SELECT Employee_ID FROM evaluation )	employee_hire_evaluation
SELECT Name FROM employee WHERE Employee_ID NOT in ( SELECT Employee_ID FROM evaluation )	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY count( * ) DESC LIMIT 1	employee_hire_evaluation
SELECT T3.Name FROM employee AS T1 JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID GROUP BY T3.Name ORDER BY count( * ) DESC LIMIT 1	employee_hire_evaluation
SELECT Name FROM shop WHERE Shop_ID NOT in ( SELECT Shop_ID FROM hiring )	employee_hire_evaluation
SELECT Name FROM shop WHERE Shop_ID NOT in ( SELECT * FROM employee )	employee_hire_evaluation
SELECT count( * ),T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name	employee_hire_evaluation
SELECT T1.Name,count( * ) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name	employee_hire_evaluation
SELECT sum( Bonus ) FROM evaluation	employee_hire_evaluation
SELECT sum( Bonus ) FROM evaluation	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT * FROM hiring	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000	employee_hire_evaluation
SELECT count( DISTINCT Location ) FROM shop	employee_hire_evaluation
SELECT count( DISTINCT Location ) FROM shop	employee_hire_evaluation
SELECT count( * ) FROM Documents	cre_Doc_Template_Mgt
SELECT count( * ) FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID,Document_Name,Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_ID,Document_Name,Document_Description FROM Documents	cre_Doc_Template_Mgt
SELECT Document_Name,Template_ID FROM Documents WHERE Document_Description like '%w%'	cre_Doc_Template_Mgt
SELECT Document_Name,Template_ID FROM Documents WHERE Document_Description like '%w%'	cre_Doc_Template_Mgt
SELECT Document_ID,Template_ID,Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT Document_ID,Template_ID,Document_Description FROM Documents WHERE Document_Name = 'Robbin'	cre_Doc_Template_Mgt
SELECT count( DISTINCT Template_ID ) FROM Documents	cre_Doc_Template_Mgt
SELECT count( DISTINCT Template_ID ) FROM Documents	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT Template_ID,count( * ) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID,count( * ) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID,T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID,T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING count( * ) > document	cre_Doc_Template_Mgt
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING count( * ) > 1	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID,Version_Number,Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID,Version_Number,Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'or' or Template_Type_Code = '?'	cre_Doc_Template_Mgt
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'or' or Template_Type_Code = '.'	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT count( * ) FROM Templates WHERE Template_Type_Code = 'CV'	cre_Doc_Template_Mgt
SELECT Version_Number,Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Version_Number,Template_Type_Code FROM Templates WHERE Version_Number > 5	cre_Doc_Template_Mgt
SELECT Template_Type_Code,count( * ) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code,count( * ) FROM Templates GROUP BY Template_Type_Code	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count( * ) < 3	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count( * ) < 3	cre_Doc_Template_Mgt
SELECT Version_Number,Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Version_Number,Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'	cre_Doc_Template_Mgt
SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'	cre_Doc_Template_Mgt
SELECT Template_ID,count( * ) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT Template_ID,count( * ) FROM Documents GROUP BY Template_ID	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates EXCEPT SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT Template_Type_Code,Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Code,Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID	cre_Doc_Template_Mgt
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT T2.Template_ID FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Description = ''	cre_Doc_Template_Mgt
SELECT count( * ) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT count( * ) FROM Paragraphs	cre_Doc_Template_Mgt
SELECT count( DISTINCT T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT count( DISTINCT T2.Paragraph_Text ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'	cre_Doc_Template_Mgt
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text like '%Korea%'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_ID,T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_ID,T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'to NY'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT Document_ID,count( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY count( * )	cre_Doc_Template_Mgt
SELECT Document_ID,count( * ) FROM Paragraphs GROUP BY Document_ID ORDER BY count( * )	cre_Doc_Template_Mgt
SELECT T1.Document_ID,T1.Document_Name,count( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID	cre_Doc_Template_Mgt
SELECT T1.Document_ID,T1.Document_Name,count( * ) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count( * ) >= 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count( * ) >= 2	cre_Doc_Template_Mgt
SELECT T1.Document_ID,T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Document_ID,T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY count( * ) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count( * ) LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count( * ) LIMIT 1	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count( * ) between 1 AND 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count( * ) between 1 AND 2	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'	cre_Doc_Template_Mgt
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland'	cre_Doc_Template_Mgt
SELECT count( * ) FROM teacher	course_teach
SELECT count( * ) FROM teacher	course_teach
SELECT Name FROM teacher ORDER BY Age	course_teach
SELECT Name FROM teacher ORDER BY Age	course_teach
SELECT Age,Hometown FROM teacher	course_teach
SELECT Age,Hometown FROM teacher	course_teach
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban'	course_teach
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban'	course_teach
SELECT Name FROM teacher WHERE Age = '32' or Age = '33'	course_teach
SELECT Name FROM teacher WHERE Age = '32' or Age = '33'	course_teach
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1	course_teach
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1	course_teach
SELECT Hometown,count( * ) FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown,count( * ) FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count( * ) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY count( * ) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count( * ) >= 2	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count( * ) >= 2	course_teach
SELECT T1.Name,T2.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T3.Name,T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID	course_teach
SELECT T1.Name,T2.Teacher_ID FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Name	course_teach
SELECT T3.Name,T1.Course FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name	course_teach
SELECT T3.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID WHERE T1.Course = 'math'	course_teach
SELECT T3.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID WHERE T1.Course = 'math'	course_teach
SELECT T1.Name,count( * ) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID	course_teach
SELECT T3.Name,count( * ) FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID GROUP BY T3.Teacher_ID	course_teach
SELECT T3.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID GROUP BY T3.Teacher_ID HAVING count( * ) >= 2	course_teach
SELECT T3.Name FROM course AS T1 JOIN course_arrange AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T2.Teacher_ID = T3.Teacher_ID GROUP BY T3.Teacher_ID HAVING count( * ) >= 2	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT in ( SELECT Teacher_ID FROM course_arrange )	course_teach
SELECT Name FROM teacher WHERE Teacher_ID NOT in ( SELECT Teacher_ID FROM course_arrange )	course_teach
SELECT count( * ) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC	museum_visit
SELECT avg( Age ) FROM visitor WHERE Level_of_membership != 4	museum_visit
SELECT Name,Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age	museum_visit
SELECT Museum_ID,Name FROM museum GROUP BY Museum_ID ORDER BY Num_of_Staff DESC LIMIT 1	museum_visit
SELECT avg( Num_of_Staff ) FROM museum WHERE Open_Year < '2009'	museum_visit
SELECT Open_Year,Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'	museum_visit
SELECT Name FROM museum WHERE Num_of_Staff > ( SELECT min( Num_of_Staff ) FROM museum WHERE Open_Year > '2010' )	museum_visit
SELECT T1.ID,T1.Name,T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID HAVING count( * ) > 1	museum_visit
SELECT T1.ID,T1.Name,T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID ORDER BY sum( T2.Total_spent ) DESC LIMIT 1	museum_visit
SELECT T1.Museum_ID,T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1	museum_visit
SELECT Name FROM museum WHERE Museum_ID NOT in ( SELECT Museum_ID FROM visit )	museum_visit
SELECT T1.Name,T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID ORDER BY count( * ) DESC LIMIT 1	museum_visit
SELECT avg( Num_of_Ticket ),max( Num_of_Ticket ) FROM visit	museum_visit
SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1	museum_visit
SELECT T3.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T2.visitor_ID = T3.ID WHERE T1.Open_Year < '2009' INTERSECT SELECT T3.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID JOIN visitor AS T3 ON T2.visitor_ID = T3.ID WHERE T1.Open_Year > '2011'	museum_visit
SELECT count( * ) FROM visitor WHERE ID NOT in ( SELECT Museum_ID FROM museum WHERE Open_Year > '2010' )	museum_visit
SELECT count( * ) FROM museum WHERE Open_Year > '2013' or Open_Year < '2008'	museum_visit
SELECT count( * ) FROM players	wta_1
SELECT count( * ) FROM players	wta_1
SELECT count( * ) FROM matches	wta_1
SELECT count( * ) FROM matches	wta_1
SELECT first_name,birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT first_name,birth_date FROM players WHERE country_code = 'USA'	wta_1
SELECT avg( loser_age ),avg( winner_age ) FROM matches	wta_1
SELECT avg( loser_age ),avg( winner_age ) FROM matches	wta_1
SELECT avg( winner_rank ) FROM matches	wta_1
SELECT avg( winner_rank ) FROM matches	wta_1
SELECT min( loser_rank ) FROM matches	wta_1
SELECT loser_rank FROM matches GROUP BY loser_rank ORDER BY loser_rank_points DESC LIMIT 1	wta_1
SELECT count( DISTINCT country_code ) FROM players	wta_1
SELECT count( DISTINCT country_code ) FROM players	wta_1
SELECT count( DISTINCT loser_name ) FROM matches	wta_1
SELECT count( DISTINCT loser_name ) FROM matches	wta_1
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10	wta_1
SELECT * FROM matches GROUP BY winner_entry HAVING count( * ) > 10	wta_1
SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016	wta_1
SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016	wta_1
SELECT count( * ) FROM matches WHERE year = 2013 or year = 2016	wta_1
SELECT count( * ) FROM matches WHERE year = 2013 or year = 2016	wta_1
SELECT T1.country_code,T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code,T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'	wta_1
SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_name = 'WTA Championships' INTERSECT SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_name = 'Australian Open'	wta_1
SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.loser_age DESC LIMIT 1	wta_1
SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.loser_age DESC LIMIT 1	wta_1
SELECT first_name,last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name,last_name FROM players ORDER BY birth_date	wta_1
SELECT first_name,last_name FROM players WHERE hand = 'left' ORDER BY birth_date	wta_1
SELECT first_name,last_name FROM players WHERE hand = 'left' ORDER BY birth_date	wta_1
SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.tours ORDER BY count( T2.tours ) DESC LIMIT 1	wta_1
SELECT T1.first_name,T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code ORDER BY count( T2.tours ) DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT T1.first_name,T2.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.winner_name ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT T1.first_name,T2.winner_rank_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.winner_name ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' ORDER BY T2.winner_rank_points LIMIT 1	wta_1
SELECT T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.loser_rank = Australian Open ORDER BY T2.winner_rank_points DESC LIMIT 1	wta_1
SELECT T2.loser_name,T2.winner_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.minutes DESC LIMIT 1	wta_1
SELECT T2.winner_name,T2.loser_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.minutes DESC LIMIT 1	wta_1
SELECT avg( T2.ranking ),T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name,avg( T2.ranking ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT sum( T2.ranking_points ),T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id	wta_1
SELECT T1.first_name,sum( T2.ranking_points ) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT count( * ),country_code FROM players GROUP BY country_code	wta_1
SELECT country_code,count( * ) FROM players GROUP BY country_code	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50	wta_1
SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50	wta_1
SELECT ranking_date,sum( tours ) FROM rankings GROUP BY ranking_date	wta_1
SELECT ranking_date,sum( tours ) FROM rankings GROUP BY ranking_date	wta_1
SELECT count( * ),year FROM matches GROUP BY year	wta_1
SELECT count( * ),year FROM matches GROUP BY year	wta_1
SELECT winner_name,winner_rank FROM matches ORDER BY winner_age LIMIT 3	wta_1
SELECT T2.winner_name,T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age LIMIT 3	wta_1
SELECT count( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'WTA Championships and were left' and T1.hand = 'WTA Championships' INTERSECT SELECT count( T2.winner_entry ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'left'	wta_1
SELECT count( * ) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'left' and T2.winner_hand = 'WTA Championships'	wta_1
SELECT T1.first_name,T1.country_code,T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points LIMIT 1	wta_1
SELECT T1.first_name,T1.country_code,T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id ORDER BY T2.winner_rank_points DESC LIMIT 1	wta_1
SELECT hand,count( * ) FROM players GROUP BY hand	wta_1
SELECT hand,count( * ) FROM players GROUP BY hand	wta_1
SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'	battle_death
SELECT name,tonnage FROM ship ORDER BY name DESC	battle_death
SELECT name,date,result FROM battle	battle_death
SELECT max( killed ),min( killed ),sum( killed ) FROM death GROUP BY killed	battle_death
SELECT avg( injured ),injured FROM death GROUP BY injured	battle_death
SELECT T2.killed,T2.injured FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.tonnage = ''	battle_death
SELECT name,result FROM battle WHERE bulgarian_commander != 'Boril'	battle_death
SELECT DISTINCT T1.id,T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'	battle_death
SELECT T1.id,T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 10	battle_death
SELECT T1.id,T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY sum( T2.injured ) DESC LIMIT 1	battle_death
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' and latin_commander = ' ?'	battle_death
SELECT count( DISTINCT result ) FROM battle	battle_death
SELECT count( * ) FROM battle WHERE id NOT in ( SELECT lost_in_battle FROM ship WHERE tonnage = '' )	battle_death
SELECT T1.name,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'	battle_death
SELECT name,result,bulgarian_commander FROM battle WHERE id NOT in ( SELECT lost_in_battle FROM ship WHERE location = 'English Channel' ) EXCEPT SELECT T1.name,T1.bulgarian_commander,T1.result FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'	battle_death
SELECT note FROM death WHERE note like '%East%'	battle_death
SELECT line_1 FROM Addresses WHERE line_1 like '%1%'	student_transcripts_tracking
SELECT line_1,line_2 FROM Addresses	student_transcripts_tracking
SELECT count( * ) FROM Courses	student_transcripts_tracking
SELECT count( * ) FROM Courses	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'math'	student_transcripts_tracking
SELECT course_description FROM Courses WHERE course_name = 'math'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'	student_transcripts_tracking
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'	student_transcripts_tracking
SELECT T1.department_name,T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_name,T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT count( DISTINCT department_id ) FROM Degree_Programs	student_transcripts_tracking
SELECT count( DISTINCT department_id ) FROM Degree_Programs	student_transcripts_tracking
SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs	student_transcripts_tracking
SELECT count( * ) FROM Degree_Programs	student_transcripts_tracking
SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineering'	student_transcripts_tracking
SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineering'	student_transcripts_tracking
SELECT section_name,section_description FROM Sections	student_transcripts_tracking
SELECT section_name,section_description FROM Sections	student_transcripts_tracking
SELECT T1.course_name,T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2	student_transcripts_tracking
SELECT T1.course_name,T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count( * ) < 2	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT T1.semester_name,T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name,T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name like '%the computer%'	student_transcripts_tracking
SELECT department_description FROM Departments WHERE department_name like '%computer%'	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count( * ) = 2	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count( * ) = semester	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelor	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = Bachelors	student_transcripts_tracking
SELECT T2.student_course_id FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T2.student_course_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id,count( * ) FROM Student_Enrolment AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_enrolment_id = T2.student_enrolment_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id,T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T2.student_id,T1.first_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT in ( SELECT semester_id FROM Student_Enrolment )	student_transcripts_tracking
SELECT semester_name FROM Semesters WHERE semester_id NOT in ( SELECT semester_id FROM Student_Enrolment )	student_transcripts_tracking
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id	student_transcripts_tracking
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT last_name FROM Students WHERE student_id in ( SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = North Carolina	student_transcripts_tracking
SELECT last_name FROM Students WHERE student_id in ( SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina' ) EXCEPT SELECT T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id	student_transcripts_tracking
SELECT T1.transcript_date,T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING count( * ) >= 2	student_transcripts_tracking
SELECT T4.transcript_date,T4.transcript_id FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id JOIN Transcript_Contents AS T3 ON T2.student_course_id = T3.student_course_id JOIN Transcripts AS T4 ON T3.transcript_id = T4.transcript_id GROUP BY T4.transcript_id HAVING count( * ) >= 2	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' and last_name = 'Ward'	student_transcripts_tracking
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timothy' and last_name = 'Ward'	student_transcripts_tracking
SELECT T1.first_name,T1.middle_name,T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name,middle_name,last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name,middle_name,last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT first_name,middle_name,last_name FROM Students ORDER BY date_first_registered LIMIT 1	student_transcripts_tracking
SELECT DISTINCT first_name FROM Students WHERE permanent_address_id != ( SELECT permanent_address_id FROM Students )	student_transcripts_tracking
SELECT DISTINCT T2.first_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T2.permanent_address_id != ( SELECT permanent_address_id FROM Students )	student_transcripts_tracking
SELECT T2.current_address_id,T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id GROUP BY T2.current_address_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.address_id,T1.line_1,T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1	student_transcripts_tracking
SELECT avg( transcript_date ) FROM Transcripts	student_transcripts_tracking
SELECT avg( transcript_date ) FROM Transcripts	student_transcripts_tracking
SELECT transcript_date,other_details FROM Transcripts ORDER BY transcript_date LIMIT 1	student_transcripts_tracking
SELECT transcript_date,other_details FROM Transcripts ORDER BY transcript_date LIMIT 1	student_transcripts_tracking
SELECT count( * ) FROM Transcripts	student_transcripts_tracking
SELECT count( * ) FROM Transcripts	student_transcripts_tracking
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1	student_transcripts_tracking
SELECT max( transcript_date ) FROM Transcripts	student_transcripts_tracking
SELECT T2.transcript_id,count( * ) FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id	student_transcripts_tracking
SELECT count( T3.transcript_id ),T1.course_id FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id JOIN Transcripts AS T3 ON T2.transcript_id = T3.transcript_id GROUP BY T3.transcript_id	student_transcripts_tracking
SELECT T1.transcript_date,T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) LIMIT 1	student_transcripts_tracking
SELECT T1.transcript_date,T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id ORDER BY count( * ) LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE * = Master INTERSECT SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.other_details = 'Bachelor'	student_transcripts_tracking
SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id = Masters INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.other_details = 'Bachelors'	student_transcripts_tracking
SELECT count( DISTINCT current_address_id ) FROM Students	student_transcripts_tracking
SELECT DISTINCT T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY other_student_details DESC	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY other_student_details DESC	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT section_description FROM Sections WHERE section_name = 'h'	student_transcripts_tracking
SELECT first_name FROM Students WHERE cell_mobile_number = 'Haiti' or cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT first_name FROM Students WHERE permanent_address_id = Haiti or cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon ORDER BY Title	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	tvshow
SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	tvshow
SELECT Title,Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title,Directed_by FROM Cartoon ORDER BY Original_air_date	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' or Directed_by = 'Brandon'	tvshow
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' or Directed_by = 'Brandon'	tvshow
SELECT Country,count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1	tvshow
SELECT Country,count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1	tvshow
SELECT count( DISTINCT series_name ),count( DISTINCT Content ) FROM TV_Channel	tvshow
SELECT count( DISTINCT series_name ),count( DISTINCT Content ) FROM TV_Channel	tvshow
SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT count( * ) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT count( * ) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT Language,count( * ) FROM TV_Channel GROUP BY Language ORDER BY count( * ) LIMIT 1	tvshow
SELECT Language,count( * ) FROM TV_Channel GROUP BY Language ORDER BY count( * ) LIMIT 1	tvshow
SELECT Language,count( * ) FROM TV_Channel GROUP BY Language	tvshow
SELECT count( * ),Language FROM TV_Channel GROUP BY Language	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'	tvshow
SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T1.Content FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Radio '''	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode FROM TV_series ORDER BY Rating	tvshow
SELECT Episode,Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT Episode,Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	tvshow
SELECT min( Share ),max( Share ) FROM TV_series	tvshow
SELECT max( Share ),min( Share ) FROM TV_series	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT Episode FROM TV_series WHERE Episode = 'A Love of a Lifetime'	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT count( * ),Directed_by FROM Cartoon GROUP BY Directed_by	tvshow
SELECT T3.Directed_by,count( * ) FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id JOIN Cartoon AS T3 ON T2.id = T3.Channel GROUP BY T3.Directed_by	tvshow
SELECT Production_code,Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT Production_code,Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1	tvshow
SELECT T1.Package_Option,T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'high definition'	tvshow
SELECT T1.Package_Option,T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'high definition'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'	tvshow
SELECT T1.series_name,T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' and T2.Written_by = 'Michael Chang' INTERSECT SELECT T1.series_name,T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael' and T2.Written_by = 'Chang'	tvshow
SELECT T1.series_name,T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name,T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael Chang'	tvshow
SELECT Pixel_aspect_ratio_PAR,Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT Pixel_aspect_ratio_PAR,Country FROM TV_Channel WHERE Language != 'English'	tvshow
SELECT id FROM TV_Channel GROUP BY id HAVING count( * ) > 2	tvshow
SELECT id FROM TV_Channel GROUP BY id HAVING count( * ) > 2	tvshow
SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT id FROM TV_Channel EXCEPT SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'	tvshow
SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'	tvshow
SELECT Package_Option FROM TV_Channel EXCEPT SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones'	tvshow
SELECT count( * ) FROM poker_player	poker_player
SELECT count( * ) FROM poker_player	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC	poker_player
SELECT Final_Table_Made,Best_Finish FROM poker_player	poker_player
SELECT Final_Table_Made,Best_Finish FROM poker_player	poker_player
SELECT avg( Earnings ) FROM poker_player	poker_player
SELECT avg( Earnings ) FROM poker_player	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1	poker_player
SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made	poker_player
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1	poker_player
SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1	poker_player
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1	poker_player
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1	poker_player
SELECT avg( T1.Earnings ) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT avg( T1.Earnings ) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT Nationality,count( * ) FROM people GROUP BY Nationality	poker_player
SELECT Nationality,count( * ) FROM people GROUP BY Nationality	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count( * ) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count( * ) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING count( * ) >= 2	poker_player
SELECT Nationality FROM people GROUP BY Nationality HAVING count( * ) >= 2	poker_player
SELECT Name,Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name,Birth_Date FROM people ORDER BY Name	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE Nationality != 'Russia'	poker_player
SELECT Name FROM people WHERE People_ID NOT in ( SELECT People_ID FROM poker_player ) EXCEPT SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT Name FROM people EXCEPT SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT count( DISTINCT Nationality ) FROM people	poker_player
SELECT count( DISTINCT Nationality ) FROM people	poker_player
SELECT count( state ) FROM AREA_CODE_STATE	voter_1
SELECT contestant_number,contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC	voter_1
SELECT vote_id,phone_number,state FROM VOTES	voter_1
SELECT max( area_code ),min( area_code ) FROM AREA_CODE_STATE	voter_1
SELECT created FROM VOTES WHERE state = 'CA'	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'	voter_1
SELECT DISTINCT state,created FROM VOTES	voter_1
SELECT T1.contestant_number,T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T2.contestant_number HAVING count( * ) >= 2	voter_1
SELECT T1.contestant_number,T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number ORDER BY T2.created LIMIT 1	voter_1
SELECT count( * ) FROM VOTES WHERE state = 'NY' or state = 'CA'	voter_1
SELECT count( * ) FROM CONTESTANTS WHERE contestant_number NOT in ( SELECT contestant_number FROM VOTES )	voter_1
SELECT area_code FROM AREA_CODE_STATE GROUP BY area_code ORDER BY count( * ) DESC LIMIT 1	voter_1
SELECT T2.created,T2.state,T2.phone_number FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'	voter_1
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = ''	voter_1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name like '%Al%'	voter_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT Name FROM country WHERE IndepYear > 1950	world_1
SELECT count( * ) FROM country WHERE GovernmentForm = 'republic'	world_1
SELECT count( * ) FROM country WHERE GovernmentForm = 'republics'	world_1
SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'	world_1
SELECT sum( SurfaceArea ) FROM country WHERE SurfaceArea like %Carribean%	world_1
SELECT Continent FROM country WHERE Name = 'Anguilla'	world_1
SELECT Continent FROM FAIL WHERE seq = 'Anguilla'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT District FROM city WHERE Name = 'Kabul'	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' GROUP BY T2.Language ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'	world_1
SELECT Population,LifeExpectancy FROM country WHERE Name = 'Brazil'	world_1
SELECT Population,LifeExpectancy FROM country WHERE Name = 'Brazil’s'	world_1
SELECT Region,Population FROM country WHERE Name = 'Angola'	world_1
SELECT Region,Population FROM country WHERE Name = 'Angola'	world_1
SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central'	world_1
SELECT avg( LifeExpectancy ) FROM country WHERE Continent = '?'	world_1
SELECT Name FROM country WHERE LifeExpectancy = ( SELECT min( LifeExpectancy ) FROM country WHERE Continent = 'Asia' ) ORDER BY LifeExpectancy LIMIT 1	world_1
SELECT Name FROM country WHERE LifeExpectancy = Asia ORDER BY LifeExpectancy LIMIT 1	world_1
SELECT sum( Population ),max( GNP ) FROM country WHERE Continent = 'Asia'	world_1
SELECT Population,GNP FROM country WHERE Continent = 'Asia' LIMIT 1	world_1
SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'countries' and GovernmentForm = 'republics'	world_1
SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' and GovernmentForm = 'republics'	world_1
SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia'	world_1
SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' or Continent = 'Europe'	world_1
SELECT Population FROM city WHERE District = 'Gelderland'	world_1
SELECT sum( Population ) FROM city WHERE District = 'Gelderland'	world_1
SELECT avg( GNP ),sum( Population ) FROM country WHERE GovernmentForm = 'US'	world_1
SELECT avg( GNP ),sum( Population ) FROM country WHERE Continent = 'US'	world_1
SELECT count( DISTINCT Language ) FROM countrylanguage	world_1
SELECT count( DISTINCT Language ) FROM countrylanguage	world_1
SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'	world_1
SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'	world_1
SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'	world_1
SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'	world_1
SELECT count( * ) FROM countrylanguage WHERE IsOfficial = 'Afghanistan'	world_1
SELECT count( IsOfficial ) FROM countrylanguage WHERE CountryCode = 'Afghanistan'	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count( Language ) DESC LIMIT 1	world_1
SELECT Continent FROM country GROUP BY Continent ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'English'	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'English'	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French'	world_1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'French'	world_1
SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'French'	world_1
SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'French'	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'Chinese'	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'Chinese'	world_1
SELECT Region FROM country WHERE Region = 'English' or Name = 'Dutch'	world_1
SELECT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' or T2.Language = 'English'	world_1
SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'English' or Language = 'Dutch'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'English' or IsOfficial = 'Dutch'	world_1
SELECT Language FROM countrylanguage WHERE Language = ( SELECT Name FROM country WHERE Continent = 'Asian' GROUP BY Continent ORDER BY count( * ) DESC LIMIT 1 ) GROUP BY Language ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asian' GROUP BY T2.Language ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'republic' GROUP BY T2.Language HAVING count( * ) = 1	world_1
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'republic' GROUP BY T2.Language HAVING count( * ) = 1	world_1
SELECT Name FROM city WHERE Population = ( SELECT max( Population ) FROM city WHERE Name = 'English' ) ORDER BY Population DESC LIMIT 1	world_1
SELECT Name FROM city WHERE Population = ( SELECT Percentage FROM countrylanguage WHERE Language = 'English' ) ORDER BY Population DESC LIMIT 1	world_1
SELECT Name,Population,LifeExpectancy FROM country WHERE Continent = 'asian' ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT Name,Population,LifeExpectancy FROM country WHERE SurfaceArea = ( SELECT max( SurfaceArea ) FROM country WHERE Continent = 'country' ) ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT in ( SELECT CountryCode FROM countrylanguage WHERE Language = 'is' )	world_1
SELECT avg( T1.LifeExpectancy ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial != 'is'	world_1
SELECT sum( Population ) FROM country WHERE Name NOT in ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT sum( Population ) FROM country WHERE Name NOT in ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT T2.IsOfficial FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix'	world_1
SELECT T2.IsOfficial FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix'	world_1
SELECT count( DISTINCT Language ) FROM countrylanguage WHERE IsOfficial < '1930'	world_1
SELECT count( DISTINCT Language ) FROM countrylanguage WHERE IsOfficial < '1930'	world_1
SELECT Name FROM country WHERE SurfaceArea > ( SELECT max( SurfaceArea ) FROM country WHERE Continent = 'Europe' )	world_1
SELECT Name FROM country WHERE SurfaceArea > ( SELECT max( SurfaceArea ) FROM country WHERE Continent = 'Europe' )	world_1
SELECT Name FROM country WHERE Continent < 'African' and Population < ( SELECT min( Population ) FROM country WHERE Continent = 'African countries that have a population less than any country in Asia' )	world_1
SELECT Name FROM country WHERE Continent < ( SELECT min( Population ) FROM country WHERE Continent = 'African countries have a smaller population than that of any country in Asia' )	world_1
SELECT Name FROM country WHERE Population > ( SELECT max( Population ) FROM country WHERE Continent = 'Africa' ) and Population > ( SELECT Population FROM country WHERE Continent = 'Africa' )	world_1
SELECT Name FROM country WHERE Population > ( SELECT max( Population ) FROM country WHERE Continent = 'Africa' ) and Population > ( SELECT Population FROM country WHERE Continent = 'Africa' )	world_1
SELECT Code FROM country WHERE Name NOT in ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT Code FROM country WHERE Name NOT in ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'	world_1
SELECT Code FROM country WHERE GovernmentForm != 'English' and GovernmentForm != 'Republic' EXCEPT SELECT Code FROM country WHERE GovernmentForm = 'Republic'	world_1
SELECT Code FROM country WHERE GovernmentForm != 'English' EXCEPT SELECT Code FROM country	world_1
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' and T3.IsOfficial != 'English'	world_1
SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' and T3.IsOfficial != 'English'	world_1
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'Chinese' and T3.Language = 'Chinese'	world_1
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'Asia' and T3.IsOfficial = 'Chinese'	world_1
SELECT Name,IndepYear,SurfaceArea FROM country ORDER BY Population LIMIT 1	world_1
SELECT Name,IndepYear,SurfaceArea FROM country ORDER BY Population LIMIT 1	world_1
SELECT Population,Name,HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT Name,Population,HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1	world_1
SELECT T1.Name,count( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING count( * ) >= 3	world_1
SELECT T1.Name,count( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING count( * ) > 2	world_1
SELECT count( * ),District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District	world_1
SELECT count( * ),District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District	world_1
SELECT GovernmentForm,avg( LifeExpectancy ) FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > .	world_1
SELECT GovernmentForm,avg( LifeExpectancy ) FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > ?	world_1
SELECT avg( Continent ),avg( LifeExpectancy ) FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < ?	world_1
SELECT Continent,avg( LifeExpectancy ),min( LifeExpectancy ) FROM country GROUP BY Continent	world_1
SELECT Name,Region FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name,SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population DESC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population LIMIT 3	world_1
SELECT count( * ) FROM country WHERE Continent = 'Asia'	world_1
SELECT count( * ) FROM country WHERE Continent = 'Asia'	world_1
SELECT Name FROM country WHERE Continent = 'Europe' and Population > 80000	world_1
SELECT Name FROM country WHERE Continent = 'Europe' and Population <= 80000	world_1
SELECT sum( Population ),avg( SurfaceArea ) FROM country WHERE Continent = 'North America'	world_1
SELECT sum( Population ),avg( SurfaceArea ) FROM country WHERE Continent > '3000' and Continent != '.'	world_1
SELECT Name FROM city WHERE Population between 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population between 160000 AND 900000	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count( * ) DESC LIMIT 1	world_1
SELECT Language,Percentage FROM countrylanguage GROUP BY Language ORDER BY sum( Percentage ) DESC LIMIT 1	world_1
SELECT CountryCode,Language FROM countrylanguage GROUP BY CountryCode ORDER BY sum( Percentage ) DESC	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'Spanish'	world_1
SELECT count( * ) FROM countrylanguage WHERE Language = 'Spanish'	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1	world_1
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish'	world_1
SELECT count( * ) FROM conductor	orchestra
SELECT count( * ) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor ORDER BY Age	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT Name FROM conductor WHERE Nationality != 'USA'	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC	orchestra
SELECT avg( Attendance ) FROM show	orchestra
SELECT avg( Attendance ) FROM show	orchestra
SELECT max( Share ),min( Share ) FROM performance WHERE Type != 'Live final'	orchestra
SELECT max( Share ),min( Share ) FROM performance WHERE Type != 'Live final'	orchestra
SELECT count( DISTINCT Nationality ) FROM conductor	orchestra
SELECT count( DISTINCT Nationality ) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT T1.Name,T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name,T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING count( * ) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING count( * ) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY count( * ) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY count( * ) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT Record_Company,count( * ) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Record_Company,count( * ) FROM orchestra GROUP BY Record_Company	orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count( * )	orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY count( * )	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count( * ) DESC LIMIT 1	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count( * ) DESC LIMIT 1	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT in ( SELECT Orchestra_ID FROM performance )	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT in ( SELECT Orchestra_ID FROM performance )	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003	orchestra
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003	orchestra
SELECT count( * ) FROM orchestra WHERE Major_Record_Format = 'CD' or Major_Record_Format = 'DVD'	orchestra
SELECT count( * ) FROM orchestra WHERE Major_Record_Format = 'CD' or Major_Record_Format = 'DVD'	orchestra
SELECT Year_of_Founded FROM orchestra GROUP BY Year_of_Founded HAVING count( * ) > 1	orchestra
SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING count( * ) > 1	orchestra
SELECT count( * ) FROM Highschooler	network_1
SELECT count( * ) FROM Highschooler	network_1
SELECT name,grade FROM Highschooler	network_1
SELECT name,grade FROM Highschooler	network_1
SELECT DISTINCT grade FROM Highschooler	network_1
SELECT grade FROM Highschooler	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT grade FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT ID FROM Highschooler WHERE name = 'Kyle'	network_1
SELECT count( * ) FROM Highschooler WHERE grade = 9 or grade = 10 ?	network_1
SELECT count( * ) FROM Highschooler WHERE grade = 9 or grade = .	network_1
SELECT grade,count( * ) FROM Highschooler GROUP BY grade	network_1
SELECT count( * ),grade FROM Highschooler GROUP BY grade	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4	network_1
SELECT student_id,count( friend_id ) FROM Friend GROUP BY student_id	network_1
SELECT count( DISTINCT student_id ) FROM Friend	network_1
SELECT T1.name,count( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T2.student_id	network_1
SELECT T1.name,count( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T1.name	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T2.student_id ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T2.student_id ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T1.ID HAVING count( * ) >= 3	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id GROUP BY T1.ID HAVING count( * ) >= 3	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 's'	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'	network_1
SELECT count( * ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'	network_1
SELECT count( T2.friend_id ) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'	network_1
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	network_1
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	network_1
SELECT name FROM Highschooler EXCEPT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id	network_1
SELECT name FROM Highschooler EXCEPT SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id	network_1
SELECT DISTINCT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID JOIN Likes AS T3 ON T2.ID = T3.student_id INTERSECT SELECT student_id FROM Likes	network_1
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id INTERSECT SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID JOIN Likes AS T3 ON T2.ID = T3.student_id	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id INTERSECT SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id	network_1
SELECT count( * ),student_id FROM Likes GROUP BY student_id	network_1
SELECT student_id,count( * ) FROM Likes GROUP BY student_id	network_1
SELECT T1.name,count( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name,count( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY count( * ) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count( * ) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count( * ) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade > 5 GROUP BY T2.student_id HAVING count( * ) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade > 5 GROUP BY T2.friend_id HAVING count( * ) >= 5	network_1
SELECT count( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT count( * ) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT avg( grade ) FROM Highschooler	network_1
SELECT avg( grade ) FROM Highschooler	network_1
SELECT min( grade ) FROM Highschooler	network_1
SELECT grade FROM Highschooler EXCEPT SELECT grade FROM Highschooler	network_1
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	dog_kennels
SELECT avg( age ) FROM Dogs WHERE dog_id in ( SELECT dog_id FROM Treatments )	dog_kennels
SELECT avg( age ) FROM Dogs WHERE abandoned_yn in ( SELECT dog_id FROM Treatments )	dog_kennels
SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' HAVING count( * ) > 2 UNION SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' GROUP BY professional_id HAVING count( * ) > 2	dog_kennels
SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' GROUP BY professional_id HAVING count( * ) > 2	dog_kennels
SELECT name FROM Dogs WHERE owner_id NOT in ( SELECT dog_id FROM Treatments WHERE cost_of_treatment > 1000 )	dog_kennels
SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.owner_id HAVING count( * ) > 1000	dog_kennels
SELECT T4.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id EXCEPT SELECT T3.first_name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id JOIN Professionals AS T3 ON T2.professional_id = T3.professional_id	dog_kennels
SELECT T4.first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id JOIN Professionals AS T4 ON T3.professional_id = T4.professional_id EXCEPT SELECT T3.first_name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id JOIN Professionals AS T3 ON T2.professional_id = T3.professional_id	dog_kennels
SELECT professional_id,role_code,email_address FROM Professionals EXCEPT SELECT T1.professional_id,T1.role_code,T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT professional_id,role_code,email_address FROM Professionals EXCEPT SELECT T1.professional_id,T1.role_code,T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.owner_id,T1.first_name,T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id,T1.first_name,T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id,T1.role_code,T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2	dog_kennels
SELECT T1.professional_id,T1.role_code,T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2	dog_kennels
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id,T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id,T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum( T2.cost_of_treatment ) LIMIT 1	dog_kennels
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY sum( T2.cost_of_treatment ) LIMIT 1	dog_kennels
SELECT owner_id,zip_code FROM FAIL GROUP BY owner_id ORDER BY sum( charge_amount ) DESC LIMIT 1	dog_kennels
SELECT T2.owner_id,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T2.owner_id ORDER BY count( * ) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id,T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2	dog_kennels
SELECT T2.professional_id,T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id HAVING count( * ) >= 2	dog_kennels
SELECT T1.first_name,T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )	dog_kennels
SELECT T1.first_name,T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )	dog_kennels
SELECT T2.date_of_treatment,T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T2.date_of_treatment,T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_type_code = 'operating'	dog_kennels
SELECT T2.cost_of_treatment,T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT treatment_type_description,treatment_type_code FROM Treatment_Types	dog_kennels
SELECT T1.first_name,T1.last_name,T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name,T1.last_name,T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name,T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name,T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.name,T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.breed_code LIMIT 1	dog_kennels
SELECT T2.name,T2.date_adopted FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY count( T1.breed_code ) LIMIT 1	dog_kennels
SELECT T1.first_name,T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'	dog_kennels
SELECT T1.first_name,T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'	dog_kennels
SELECT T1.date_arrived,T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT T1.date_arrived,T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1	dog_kennels
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1	dog_kennels
SELECT email_address FROM Professionals WHERE state = 'Hawaii' or state = 'Wisconsin'	dog_kennels
SELECT email_address FROM Professionals WHERE state = 'Hawaii' or state = 'Wisconsin'	dog_kennels
SELECT date_arrived,date_departed FROM Dogs	dog_kennels
SELECT date_arrived,date_departed FROM Dogs	dog_kennels
SELECT count( DISTINCT dog_id ) FROM Treatments	dog_kennels
SELECT count( DISTINCT dog_id ) FROM Treatments	dog_kennels
SELECT count( DISTINCT professional_id ) FROM Treatments	dog_kennels
SELECT count( DISTINCT professional_id ) FROM Treatments	dog_kennels
SELECT role_code,street,city,state FROM Professionals WHERE city like '%West%'	dog_kennels
SELECT role_code,street,city,state FROM Professionals WHERE city like '%West%'	dog_kennels
SELECT first_name,last_name,email_address FROM Owners WHERE state like '%North%'	dog_kennels
SELECT first_name,last_name,email_address FROM Owners WHERE state like '%North%'	dog_kennels
SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )	dog_kennels
SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1	dog_kennels
SELECT count( * ) FROM Dogs WHERE dog_id NOT in ( SELECT dog_id FROM Treatments )	dog_kennels
SELECT count( DISTINCT dog_id ) FROM Treatments	dog_kennels
SELECT count( * ) FROM Owners WHERE owner_id NOT in ( SELECT owner_id FROM Dogs )	dog_kennels
SELECT count( * ) FROM Owners WHERE owner_id NOT in ( SELECT owner_id FROM Dogs )	dog_kennels
SELECT count( * ) FROM Professionals WHERE professional_id NOT in ( SELECT professional_id FROM Treatments )	dog_kennels
SELECT count( * ) FROM Professionals WHERE professional_id NOT in ( SELECT professional_id FROM Treatments )	dog_kennels
SELECT name,age,weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT name,age,weight FROM Dogs WHERE abandoned_yn = '1'	dog_kennels
SELECT avg( age ) FROM Dogs	dog_kennels
SELECT avg( age ) FROM Dogs	dog_kennels
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1	dog_kennels
SELECT age FROM Dogs ORDER BY age DESC LIMIT 1	dog_kennels
SELECT charge_type,charge_amount FROM Charges	dog_kennels
SELECT charge_type,charge_amount FROM Charges	dog_kennels
SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1	dog_kennels
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	dog_kennels
SELECT email_address,cell_number,home_phone FROM Professionals	dog_kennels
SELECT email_address,cell_number,home_phone FROM Professionals	dog_kennels
SELECT breed_code,breed_name FROM Breeds	dog_kennels
SELECT DISTINCT breed_code,size_code FROM Dogs	dog_kennels
SELECT T3.first_name,T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Professionals AS T3 ON T2.professional_id = T3.professional_id	dog_kennels
SELECT T3.first_name,T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Professionals AS T3 ON T2.professional_id = T3.professional_id	dog_kennels
SELECT count( * ) FROM singer	singer
SELECT count( * ) FROM singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions	singer
SELECT Birth_Year,Citizenship FROM singer	singer
SELECT Birth_Year,Citizenship FROM singer	singer
SELECT Name FROM singer WHERE Citizenship != 'France'	singer
SELECT Name FROM singer WHERE Citizenship != 'French'	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 or Birth_Year = 1949	singer
SELECT Name FROM singer WHERE Birth_Year = 1948 or Birth_Year = 1949	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer
SELECT Citizenship,count( * ) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship,count( * ) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count( * ) DESC LIMIT 1	singer
SELECT Citizenship FROM singer	singer
SELECT Citizenship,max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship	singer
SELECT max( Net_Worth_Millions ),Net_Worth_Millions FROM singer GROUP BY Citizenship	singer
SELECT T2.Title,T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT T2.Title,T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING count( * ) > 1	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING count( * ) > 1	singer
SELECT T1.Name,sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID	singer
SELECT T1.Name,sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID	singer
SELECT Name FROM singer WHERE Singer_ID NOT in ( SELECT Singer_ID FROM song )	singer
SELECT Name FROM singer WHERE Singer_ID NOT in ( SELECT Singer_ID FROM song )	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955	singer
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955	singer
SELECT count( * ) FROM Other_Available_Features	real_estate_properties
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_name = 'AirCon'	real_estate_properties
SELECT T1.property_type_description FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code	real_estate_properties
SELECT property_name FROM Properties WHERE room_count > 1 or room_count > 1	real_estate_properties
